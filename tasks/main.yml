---
- name: Ensure '{{ deployment_workdir }}' exists
  ansible.builtin.file:
    path: "{{ deployment_workdir }}"
    state: directory
    mode: 0755

- name: Download New Relic agent
  ansible.builtin.unarchive:
    src: "https://download.newrelic.com/newrelic/java-agent/newrelic-agent/{{ deployment_newrelic_version }}/newrelic-java.zip"
    dest: /tmp
    owner: "{{ deployment_user }}"
    group: "{{ deployment_group }}"
    remote_src: true
  when: deployment_newrelic_enabled

- name: Install New Relic agent
  ansible.builtin.copy:
    src: /tmp/newrelic/newrelic.jar
    dest: "{{ deployment_newrelic_dir }}"
    owner: "{{ deployment_user }}"
    group: "{{ deployment_group }}"
    remote_src: yes
    mode: 0755
  when: deployment_newrelic_enabled

- name: Transfer an artifact to the remote server
  ansible.builtin.copy:
    src: "{{ deployment_artifact }}"
    dest: "{{ deployment_workdir }}/app.jar"
    owner: "{{ deployment_user }}"
    group: "{{ deployment_group }}"
    mode: 0755
  notify: restart_app

- name: Setup environment variables
  ansible.builtin.template:
    src: env.j2
    dest: "{{ deployment_workdir }}/.env"
    owner: "{{ deployment_user }}"
    group: "{{ deployment_group }}"
    mode: 0640
  notify: restart_app

- name: Create systemd service
  ansible.builtin.template:
    src: systemd.service.j2
    dest: "/etc/systemd/system/{{ deployment_service }}.service"
    owner: root
    group: root
    mode: 0644
  notify: restart_app

- name: Ensure systemd service is started and enabled
  ansible.builtin.systemd:
    name: "{{ deployment_service }}"
    state: started
    enabled: true
    daemon_reload: true
